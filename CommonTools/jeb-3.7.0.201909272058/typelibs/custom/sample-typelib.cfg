;------------------------------------------------------------------------------
; *** SAMPLE *** JEB Type Library configuration file
;------------------------------------------------------------------------------

;template file used to configure the generation of a *.typelib file for JEB
;either hdrsrc or cstsrc must be present (both can be present)

;how to generate the typelib specified by this file?
;open a terminal and execute: (eg, on Windows)
;  $ ..\..\jeb_wincon.bat -c --typelibgen=sample-typelib.cfg

;NOTE: packing and alignment
;when generating the struct binary layouts to be stored in the typelib, an initial (default) packing value is used by typelibgen:
;the default packing value is 1, unless a MSVC is specified as a compiler, in which case, the default will be set to 8 on 64-bit platforms, and 4 on other platforms (eg, x86)
;if the default packing does not suit your requirements, your header file should start with a "#pragma pack(N)" preprocessor directive

;(optional if `cstsrc` is not present)
;a single file continaing an aggregated, preprocessed, massaged header file for which the types, prototypes, exposed methods, and constants are to be extracted
hdrsrc= smpl-header.h

;(optional if `hdrsrc` is not present)
;a single file containing a list of constants
cstsrc= smpl-constants.txt

;(mandatory) must end in '.typelib'
;IMPORTANT! once generated, this file must be moved to the <JEB>/typelibs/ folder in order for JEB to see it and load it
output=sample.typelib
;output=../../core/testdata/typelibs/sample.typelib

;(mandatory) see com.pnfsoftware.jeb.core.units.codeobject.ProcessorType
;eg: X86, X86_64, ARM, ARM64, MIPS, MIPS64
processor= X86

;(optional) see com.pnfsoftware.jeb.core.units.codeobject.SubsystemType
;eg: UNIX, LINUX, MAC, WINDOWS_KERNEL, WINDOWS_USER, WINDOWS
subsystem=

;(optional) see com.pnfsoftware.jeb.core.units.codeobject.CompilerType for a complete list
;eg: GCC, MSVC
compiler=

;(mandatory) see com.pnfsoftware.jeb.core.units.code.asm.type.TypeLibraryService for a complete list
;eg: GROUPID_TYPELIB_POSIX, GROUPID_TYPELIB_LINUX, GROUPID_TYPELIB_LINUX_ANDROID
;    GROUPID_TYPELIB_WIN32, GROUPID_TYPELIB_WINDDK
groupid= GROUPID_TYPELIB_WIN32

;(optional) floating number indicating priority order for loading
priority= 

;(mandatory) unique identifier for your typelib, keep it >20000
uuid= 20000

;(optional) integer version, start with 1 and increment; if two conflicting typelibs are present (same groupid, same uuid),
;the one with the highest version number will be loaded
version=

;(optional) name of your type library
name= Sample Types

;(optional) description string
description=

;(optional) author string
author=
